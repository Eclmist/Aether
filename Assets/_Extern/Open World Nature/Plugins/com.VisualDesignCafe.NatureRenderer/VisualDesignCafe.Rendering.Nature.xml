<?xml version="1.0"?>
<doc>
    <assembly>
        <name>VisualDesignCafe.Rendering.Nature</name>
    </assembly>
    <members>
        <member name="T:VisualDesignCafe.Rendering.Nature.BuildQueue">
            <summary>
            Multi-threaded build queue that creates and places detail objects for a cell.
            </summary>
        </member>
        <member name="E:VisualDesignCafe.Rendering.Nature.BuildQueue.OnFinished">
            <summary>
            Invoked when all cells finished building.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.BuildQueue.#ctor">
            <summary>
            Creates a new Build Queue for the given terrain data.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.BuildQueue.Clear">
            <summary>
            Clears the queue.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.BuildQueue.Dispose">
            <summary>
            Disposes the build queue.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.BuildQueue.AddRange(System.Collections.Generic.IEnumerable{VisualDesignCafe.Rendering.Nature.BuildQueue.CellBuildData})">
            <summary>
            Adds the cells to the build queue.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.BuildQueue.Sort(UnityEngine.Vector3)">
            <summary>
            Sorts the queue based on the distance from the reference position.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.BuildQueue.RebuildCellIfChanged(VisualDesignCafe.Rendering.Nature.BuildQueue.CellBuildData)">
            <summary>
            Rebuilds the cell if the data in that cell changed.
            </summary>
            <returns>True if the cell was built</returns>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.BuildQueue.GetNextCell">
            <summary>
            Gets the next cell in the build queue.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.CellRenderer.AddInstance(UnityEngine.Matrix4x4,UnityEngine.Vector3)">
            <summary>
            Adds an instance to the cell. Called duing building.
            </summary>
            <param name="matrix"></param>
            <param name="samplePosition"></param>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.CellRenderer.PostBuild">
            <summary>
            Calculates the bounds for the tiles. Called after building.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.CellRenderer.CopyBuffersToRenderers(UnityEngine.Vector3,UnityEngine.Vector3,System.Collections.Generic.Dictionary{System.Int32,VisualDesignCafe.Rendering.InstanceRenderer},System.Single,System.Single,VisualDesignCafe.Rendering.FrustumCuller,VisualDesignCafe.Rendering.Nature.CellRenderer.Buffer)">
            <summary>
            Renders the instances in the cell. 
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.CellRenderer.CopyWithoutLod(UnityEngine.Vector3,UnityEngine.Vector3,System.Collections.Generic.Dictionary{System.Int32,VisualDesignCafe.Rendering.InstanceRenderer},System.Single,System.Int32,VisualDesignCafe.Rendering.FrustumCuller,VisualDesignCafe.Rendering.Nature.CellRenderer.Buffer)">
            <summary>
            Renders the instances without any LOD.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.CellRenderer.SelectWithinRange(UnityEngine.Vector3,UnityEngine.Vector3,System.Single,System.Single,VisualDesignCafe.Rendering.FrustumCuller,VisualDesignCafe.Rendering.Nature.CellRenderer.Buffer)">
            <summary>
            Selects the instances within the given range.
            </summary>
        </member>
        <member name="F:VisualDesignCafe.Rendering.Nature.NatureRenderer._isInPrefabMode">
            <summary>
            'IsInPrefabMode' method is injected by an editor script.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.NatureRenderer.GetVisibleCellBuildProgress">
            <summary>
            Calculates the total build progress for all cells within range of any active cameras.
            Returns a number between 0.0 and 1.0 indicating the progress. Returns 1 if all cells within range finished building.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.NatureRenderer.RebuildBuffersDelayed">
            <summary>
            Rebuilds the internal buffers during the next update call.
            Can only be used in the Editor.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.NatureRenderer.RebuildBuffers(UnityEngine.TerrainChangedFlags)">
            <summary>
            Rebuilds the internal buffers used to render terrain details.
            Should be called when the terrain data changed.
            </summary>
            <param name="flags">The flags to indicate which data changed. Use FlushEverythingImmediately to rebuild all the buffers.</param>
        </member>
        <member name="T:VisualDesignCafe.Rendering.Nature.TerrainCells">
            <summary>
            Holds the cells for the terrain.
            </summary>
        </member>
        <member name="P:VisualDesignCafe.Rendering.Nature.TerrainCells.IsBuiltOrBuilding">
            <summary>
            Are the cells built or currently building?
            </summary>
        </member>
        <member name="P:VisualDesignCafe.Rendering.Nature.TerrainCells.IsBuilding">
            <summary>
            Are the cells currently building?
            </summary>
        </member>
        <member name="P:VisualDesignCafe.Rendering.Nature.TerrainCells.CurrentBuildFlags">
            <summary>
            The current build flags if the cells are building.
            </summary>
        </member>
        <member name="P:VisualDesignCafe.Rendering.Nature.TerrainCells.TerrainData">
            <summary>
            The terrain data.
            </summary>
        </member>
        <member name="P:VisualDesignCafe.Rendering.Nature.TerrainCells.Bounds">
            <summary>
            The bounds for the entire terrain.
            </summary>
        </member>
        <member name="P:VisualDesignCafe.Rendering.Nature.TerrainCells.Cells">
            <summary>
            All the cells.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainCells.#ctor(UnityEngine.Terrain,System.Single,System.Boolean)">
            <summary>
            Creates a new collection of terrain cells for the given terrain.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainCells.Dispose">
            <summary>
            Disposes of the cells.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainCells.RefreshPrototypes(UnityEngine.Camera,UnityEngine.Material,System.Boolean@)">
            <summary>
            Refreshes the detail prototypes. 
            Should be called when the prototypes changed or if the camera FOV changed.
            </summary>
            <param name="camera"></param>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainCells.Rebuild(UnityEngine.TerrainChangedFlags,UnityEngine.Camera,UnityEngine.Material,VisualDesignCafe.Rendering.Nature.CellStreamer.StreamSettings)">
            <summary>
            Rebuilds the buffers. Should be called when the terrain was changed.
            </summary>
            <param name="flags"></param>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainCells.WaitUntilBuildFinished">
            <summary>
            Waits until all cells are built.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainCells.Clear">
            <summary>
            Clears the Terrain Buffer.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainCells.OnBuildFinished">
            <summary>
            Called when all cells finished building.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainCells.CacheTerrainData(UnityEngine.Material,System.Boolean@)">
            <summary>
            Rebuilds the Terrain Data Cache.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainCells.GetCellsInRect(UnityEngine.Rect,System.Boolean[],UnityEngine.TerrainChangedFlags,VisualDesignCafe.Rendering.Nature.TerrainDataCache)">
            <summary>
            Finds all the cells within the given rect and creates Build Data
            for those cells.
            </summary>
            <param name="rect"></param>
            <param name="dirtyLayers"></param>
            <param name="flags"></param>
            <returns></returns>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainCells.ValidateCells(VisualDesignCafe.Rendering.Nature.TerrainDataCache,System.Single)">
            <summary>
            Ensures that all cells exist.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainCells.PushAllCellsToBuildQueue(VisualDesignCafe.Rendering.Nature.TerrainDataCache,VisualDesignCafe.Rendering.Nature.CellStreamer.StreamSettings)">
            <summary>
            Pushes all cells to the build queue.
            Should be called when rebuilding the entire terrain or on startup.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainCells.PushModifiedCellsToBuildQueue(VisualDesignCafe.Rendering.Nature.TerrainDataCache,UnityEngine.TerrainChangedFlags,System.Boolean[],VisualDesignCafe.Rendering.Nature.CellStreamer.StreamSettings)">
            <summary>
            Pushes all modified cells to the rebuild queue based on the given flags.
            </summary>
            <param name="flags"></param>
            <param name="dirtyLayers"></param>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainCells.GetDirtyLayers(VisualDesignCafe.Rendering.Nature.TerrainDataCache,UnityEngine.TerrainChangedFlags)">
            <summary>
            Gets the dirty layers from the Terrain Data Cache.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainCellsRenderer.#ctor(UnityEngine.Camera,VisualDesignCafe.Rendering.Nature.TerrainCells)">
            <summary>
            Creates a new renderer for Terrain Cells.
            </summary>
            <param name="camera">The camera to render to.</param>
            <param name="terrainCells">The terrain cells to render.</param>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainCellsRenderer.Start(System.Int32)">
            <summary>
            Starts the renderer in a worker thread.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainCellsRenderer.Dispose">
            <summary>
            Disposes the renderer.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainCellsRenderer.Lock(System.Action)">
            <summary>
            Locks the renderer thread to perform an action.
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainCellsRenderer.Render(System.Boolean)">
            <summary>
            Renders all the instances in the cells.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainCellsRenderer.PrepareNextFrame(VisualDesignCafe.Rendering.Nature.RenderSettings,System.Boolean)">
            <summary>
            Prepares the next frame for rendering. Builds the internal buffers required
            for GPU Instancing.
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainCellsRenderer.RenderLoop(System.Object)">
            <summary>
            The main render loop. Fills the render buffers required for GPU Instancing.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainDataCache.#ctor(VisualDesignCafe.Rendering.Nature.TerrainDataCache)">
            <summary>
            Creates a shallow clone of the given TerrainDataCache
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainDataCache.#ctor(UnityEngine.Terrain,UnityEngine.Material)">
            <summary>
            Creates a new Terrain Data Cache for the given Terrain.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainDataCache.Dispose">
            <summary>
            Disposes of the Terrain Data Cache and all the Detail Prototype Caches.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainDataCache.RefreshPrototypes(UnityEngine.Terrain,UnityEngine.Camera,UnityEngine.Material,System.Boolean@)">
            <summary>
            Refreshes the Detail Prototype Caches.
            </summary>
            <param name="flushEverything">Should the entire cache be flushed and the terrain rebuilt?</param>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainDataCache.CopyFrom(UnityEngine.Terrain,UnityEngine.Material,System.Boolean@)">
            <summary>
            Caches the data for the given Terrain.
            </summary>
            <param name="flushEverything">Should the entire cache be flushed and the terrain rebuilt?</param>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainDataCache.GetModifiedHeightmapRect(System.Boolean)">
            <summary>
            Get the Rect of the heightmap that was modified since
            the cache was last refreshed.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainDataCache.GetModifiedDetailMapRect(System.Boolean[],System.Boolean)">
            <summary>
            Gets the Rect of the detail map that was modified since 
            the cache was last refreshed.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainDataCache.GetModifiedDetailMapRect(System.Int32,System.Boolean)">
            <summary>
            Gets the Rect of the detail map that was modified since 
            the cache was last refreshed.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainDataCache.GetHeight(System.Int32,System.Int32)">
            <summary>
            Gets the local height of the terrain at the given pixel.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainDataCache.GetInterpolatedHeight(System.Single,System.Single)">
            <summary>
            Gets the local interpolated height of the terrain at the given position.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainDataCache.GetInterpolatedNormal(System.Single,System.Single)">
            <summary>
            Gets the interpolated normal of the terrain surface at the given position.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainDataCache.GetDirtyLayers">
            <summary>
            Gets the detail layers that changed since the cache was last refreshed.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainDataCache.AreaHasChanged(System.Boolean[],UnityEngine.Rect)">
            <summary>
            Returns true if the Rect has changed for the given layers 
            since the cache was last refreshed.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainDataCache.AreaHasChanged(System.Int32,UnityEngine.Rect)">
            <summary>
            Returns true if the Rect has changed for the given layer
            since the cache was last refreshed.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainDataCache.CopyDetailTextureFrom(UnityEngine.TerrainData,System.Int32)">
            <summary>
            Copies the detail texture from the Terrain.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainDataCache.CopyHeightmapFrom(UnityEngine.TerrainData)">
            <summary>
            Copies the heightmap from the Terrain.
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.Nature.TerrainDataCache.Hash(System.Int32[0:,0:])">
            <summary>
            Creates a hash of the given detail map.
            </summary>
        </member>
        <member name="F:VisualDesignCafe.Rendering.FrustumCuller.PlaneCount">
            <summary>
            The number of planes in the frustum.
            </summary>
        </member>
        <member name="F:VisualDesignCafe.Rendering.FrustumCuller._planes">
            <summary>
            Defines the set of planes that bound the camera's frustum. All plane normals point to the inside of the 
            frustum.
            Ordering: [0] = Left, [1] = Right, [2] = Down, [3] = Up, [4] = Near, [5] = Far
            </summary>
        </member>
        <member name="F:VisualDesignCafe.Rendering.FrustumCuller._absNormals">
            <summary>
            Caches the absolute values of plane normals for re-use during frustum culling of multiple AABB instances
            </summary>
        </member>
        <member name="F:VisualDesignCafe.Rendering.FrustumCuller._planeNormal">
            <summary>
            Caching the plane normals allows the culling code to avoid calling property getters on the Plane instances
            </summary>
        </member>
        <member name="F:VisualDesignCafe.Rendering.FrustumCuller._planeDistance">
            <summary>
            Caching the plane distances allows the culling code to avoid calling property getters on the Plane instances
            </summary>
        </member>
        <member name="M:VisualDesignCafe.Rendering.FrustumCuller.SetPlanes(UnityEngine.Plane[])">
            <summary>
            Update the bounding frustum
            </summary>
        </member>
    </members>
</doc>
